#!/bin/bash
# Purpose: Initialize HPC environment using workload manager slurm

function create_temp_config () {

	echo "Creating temp config file..."
	temp_jh_config=$(mktemp)
	cat $FILE &> $temp_jh_config
	echo "Config file $temp_jh_config created ..."

	# PROJECT CONFIG
	sed -i "s;^scratch_dir=.*;scratch_dir=$PROJECT_GROUP;" $temp_jh_config
	sed -i "s;^external_hub_url=.*;external_hub_url=$EXTERNAL_HUB_URL;" $temp_jh_config
	## SSH CONFIG
	sed -i "s;^ssh_tunnel_api_port=.*;ssh_tunnel_api_port=$SSH_TUNNEL_API_PORT;" $temp_jh_config
	sed -i "s;^ssh_tunnel_user_jh=.*;ssh_tunnel_user_jh=$SSH_TUNNEL_USER;" $temp_jh_config
	sed -i "s;^ssh_jh_ip=.*;ssh_jh_ip=$SSH_JH_IP;" $temp_jh_config
	sed -i "s;^ssh_priv_key=.*;ssh_priv_key=\$(cat $SSH_PRIV_KEY);" $temp_jh_config
	## ADDITIONAL CONFIG
	sed -i "s;^creating_user_homes=.*;creating_user_homes=$CREATING_USER_HOMES;" $temp_jh_config
	sed -i "s;^home_dir=.*;home_dir=$HOME_DIR;" $temp_jh_config
	sed -i "s;^use_singularity=.*;use_singularity=$USE_SINGULARITY;" $temp_jh_config
	sed -i "s;^overlay_size=.*;overlay_size=$OVERLAY_SIZE;" $temp_jh_config
	sed -i "s;^create_ext3_overlay_cmd=.*;create_ext3_overlay_cmd="$CREATE_EXT3_OVERLAY_CMD";" $temp_jh_config
	sed -i "s;^container_to_start_compute=.*;container_to_start_compute=$CONTAINER_TO_START_COMPUTE;" $temp_jh_config
	sed -i "s;^container_to_start_gpu=.*;container_to_start_gpu=$CONTAINER_TO_START_GPU;" $temp_jh_config
	sed -i "s;^enable_logging=.*;enable_logging=$ENABLE_LOGGING;" $temp_jh_config
	sed -i "s;^cmd_load_singularity=.*;cmd_load_singularity="$CMD_LOAD_SINGULARITY";" $temp_jh_config

	echo "#############################################################"
	echo "#############################################################"
	echo "DONE. Your configuration file is ready at $temp_jh_config"
	echo "#############################################################"
	echo "#############################################################"

	exit 0
}

function additional_config () {

	echo "########## 3. Additional Information ##########"
	while (true); do
		echo "Do you want to create \"home directories\" for users from the JupyteHub?"
		echo "If set to false, no home directories and overlays (for singularity) will be created. That means, changes coming from the user are not persistent."
		read -p "Create home directories on spawn? (Y,n): " createhomes
		if [[ $createhomes == "Y" ]] || [[ $createhomes == "y" ]]; then
			echo "Okelidokeli. Creating user homes on spawn ..."
			createhomes=true
		elif [[ $createhomes == "N" ]] || [[ $createhomes == "n" ]]; then
			echo "Okelidokeli. WILL NOT create user home directories on spawn"
			createhomes=false
		else
			echo "Okelidokeli. Creating user home directories on spawn"
			createhomes=true
		fi

		if $createhomes; then
			while (true); do
				echo "Where do you want to store the user home directories?"
				read -p "Path [$PROJECT_GROUP\HOME_DIRECTORIES/]: " homepath
				[[ $homepath == "" ]] && echo "Home Directories: $PROJECT_GROUP/HOME_DIRECTORIES/" && homepath=$PROJECT_GROUP/HOME_DIRECTORIES/

				echo "Creating home directories in $homepath ..."
				HOME_DIR=$homepath
				echo "####################################"
				break
			done
		fi
			CREATING_USER_HOMES=$createhomes
			echo "####################################"
			break
	done

		while (true); do
			echo "Do you want to use Singularity to spawn the jupyter notebooks?"
			read -p "Use singularity (Y/n): " usesingu
			if [[ $usesingu == "Y" ]] || [[ $usesingu == "y" ]]; then
				echo "Okelidokeli. Using singularity to spawn jupyter notebooks"
				usesingu=true
			elif [[ $usesingu == "N" ]] || [[ $usesingu == "n" ]]; then
				echo "Okelidokeli. WILL NOT using singularity."
				usesingu=false
			else
				echo "Okelidokeli. Using singularity to spawn jupyter notebooks"
				usesingu=true
			fi

			echo "Setting use_singularity to $usesingu"
			USE_SINGULARITY=$usesingu
			echo "####################################"

			if $usesingu && $createhomes; then
				while (true); do
					echo "An overlay will be created for all users. This way changes remain persistent."
					read -p "Overlay size (MB) [2048]: " overlays
					if [[ ! $overlays == "" ]]; then
						if [[ ! $overlays =~ ^[0-9]+$ ]]; then
							echo "Error: Please type in a number!"
							continue
						else
							echo "Okelidokeli.. Overlay size: $overlays MB"
						fi
					else
						echo "Using default 2048 MB"
						overlays=2048
					fi
					OVERLAY_SIZE=$overlays
					echo "##################################"
					break
				done
				while (true); do
					echo ""
					echo "overlay_location = overlay for the current logged in user"
					def_cmd="mkfs.ext3 -F -q -d $PROJECT_GROUP/overlay_root/ \$overlay_location"
					read -p "Command [$def_cmd]: " overlayext3cmd
					if [[ $overlayext3cmd == "" ]]; then
						echo "Okelidokeli. Using default:"
						echo $def_cmd
						overlayext3cmd=$def_cmd
					else
						echo "Okelidokeli. Typed command:"
						echo $overlayext3cmd
					fi

					CREATE_EXT3_OVERLAY_CMD=$overlayext3cmd
					echo "##################################"
					break
				done
			else
				echo "WARNING: At this point I would ask you the size of the overlay placed in the user home directory. But you decided to not create home directories. All user changes are temporary."
			fi
			if $usesingu; then
				while (true); do
					echo "We need to know which container should be started when the job starts on a regular compute node"
					def_compute_s="$PROJECT_GROUP/SINGULARITY/compute_jupyter.img"
					read -p "Path to container [$def_compute_s]: " computecon
					if [[ $computecon == "" ]]; then
						if [[ ! -f $computecon ]]; then
							echo "WARNING: The container $def_compute_s does not exists. Maybe you want to build it?"
							computecon=$def_compute_s
						else
							echo "OK. Using default:"
							echo $def_compute_s
							computecon=$def_compute_s
						fi
					else
						if [[ ! -f $computecon ]]; then
							echo "WARNING: The container $def_compute_s does not exists. Maybe you want to build it?"
						else
							echo "OK. Using following container:"
							echo $computecon
						fi
					fi

					CONTAINER_TO_START_COMPUTE=$computecon
					echo "####################################"
					break
				done
				while (true); do
					echo "We need to know which container should be started when the job starts on a GPU node"
					echo "If you dont want to use GPUs, just leave it blank"
					def_gpu_s="$PROJECT_GROUP/SINGULARITY/gpu_jupyter.img"
					read -p "Path to container [$def_gpu_s]: " gpucon
					if [[ $gpucon == "" ]]; then
						if [[ ! -f $gpucon ]]; then
							echo "WARNING: The container $def_gpu_s does not exists. Maybe you want to build it?"
							computecon=$def_gpu_s
						else
							echo "OK. Using default:"
							echo $def_gpu_s
							computecon=$def_gpu_s
						fi
					else
						if [[ ! -f $gpucon ]]; then
							echo "WARNING: The container $def_gpu_s does not exists. Maybe you want to build it?"
						else
							echo "OK. Using following container:"
							echo $gpucon
						fi
					fi

					CONTAINER_TO_START_GPU=$gpucon
					echo "####################################"
					break
				done
				while (true); do
					echo "Now I would like to know how to laod the singularity environment, so that the singularity command is available"
					echo "e.g. module load singularity"
					echo "Leave blank if singularity is always available"
					read -p "Command: " loadsingu
					if [[ $loadsingu == "" ]]; then
						echo "Okelidokeli. Singularity is always available."
						loadsingu=""
					else
						echo "OK. Using following command to load the singularity environment:"
						echo $loadsingu
					fi

					CMD_LOAD_SINGULARITY=$loadsingu
					echo "#####################################"
					break
				done
			fi
			break
		done
		while (true); do
			echo "Do you want to enable logging?"
			read -p "Enable logging (Y,n): " logging
			if [[ $logging == "" ]]; then
				echo "Enabled logging."
				logging=true
			elif [[ $logging == "Y" ]] || [[ $logging == "y" ]]; then
				echo "Enabled logging."
				logging=true
			else
				echo "Disabled logging."
				logging=false
			fi

			ENABLE_LOGGING=$logging
			echo "################################"
			break
		done
	create_temp_config
}

function ssh_config () {

	echo "########## 2. SSH Configuration ###########"
	while (true); do
		echo "Should we start a second SSH tunnel to make the JupyterHub API available on the compute node?"
		read -p "Start SSH Tunnel for the JupyterHub API (Y,n): " starttun
		if [[ $starttun == "" ]]; then
			echo "Okelidokeli. Starting SSH tunnel for the JupyterHub API."
			starttun=true
		elif [[ $starttun == "Y" ]] || [[ $starttun == "y" ]]; then
			echo "Okelidokeli. Starting SSH tunnel for the JupyterHub API."
			starttun=true
		else
			echo "OK. Will not start a SSH tunnel for the JupyterHub API"
			starttun=false
		fi

		if $starttun; then
			while (true); do
				echo "In order for the JupyterHub to reach the compute node, and for the JupyterHub API to be available on the compute node, two SSH tunnels must be started"
				echo "On which port should I bind the JupyterHub API on the compute node?"
				while (true); do
					read -p "API Port (compute node) [8083]: " sshapiportq
					[[ $sshapiportq == "" ]] && echo "Okelidokeli.. Using default 8083." && sshapiportq=8083
					[[ ! $sshapiportq =~ ^[0-9] ]] && echo "Error: Not an integer :-(" && continue
					[[ ! $sshapiportq -gt 1023 ]] && echo "do not use well known ports :-(" && continue

					echo "Perfect! API Port on compute node set to $sshapiportq"
					SSH_TUNNEL_API_PORT=$sshapiportq
					echo "#####################################"
					break
				done
				break
			done
		fi

		SSH_TUNNEL_API=$starttun
		echo "##################################"
		break
	done
		while (true); do
			echo "Now which user I should use to start the SSH tunnel? The user should exists on the JupyterHub :-)"
			read -p "SSH tunnel user [tunnelbot]: " sshuserq
			[[ $sshuserq == "" ]] && echo "Okelidokeli...Using default tunnelbot" && sshuserq="tunnelbot"
			
			echo "Ok. Using user $sshuserq"
			SSH_TUNNEL_USER=$sshuserq
			echo "#####################################"
			break
		done
		while (true); do

			echo "Now we need the JupyterHub IP. The IP will be used to build the SSH tunnel."
			read -p "JupyterHup IP: " sshjhipq
			[[ $sshjhipq == "" ]] && echo "You should type something :-(" && continue

			echo "Entered IP: $sshjhipq"
			echo "Testing IP ..."
			ping -c 2 $sshjhipq
			if [[ ! $? -eq 0 ]]; then
				echo "WARNING: THE ENTERED IP IS NOT REACHABLE!!!"
			fi
			SSH_JH_IP=$sshjhipq
			echo "#####################################"
			break
		done
		while (true); do
			echo "To build a SSH tunnel without entering a password, we need a private key from the user whos responisble to spawn the jupyter notebooks."
			read -p "PATH/TO/PRIVATE/KEY [$HOME/.ssh/id_rsa]: " sshprivkeyq
			[[ $sshprivkeyq == "" ]] && echo "Using default $HOME/.ssh/id_rsa ..." && sshprivkeyq=$HOME/.ssh/id_rsa
			[[ ! -f $sshprivkeyq ]] && echo "Error: File $sshprivkeyq does not exists" && continue

			echo "Private Key: $sshprivkeyq"
			SSH_PRIV_KEY=$sshprivkeyq
			echo "#####################################"
			break
		done
		additional_config
}

function general_project_config () {

	echo "########## 1. General Project Information ##########"
	while (true); do
		echo ""
		echo "Your project needs a group/user directory, which conatins all wrapper scripts and is accessible from each compute node..."
		echo "At best, this is the directory where you have cloned this git repository"
		read -p "Project group/user directory as absoulte path (e.g. /scratch/PROJECTNAME/) [$(pwd)/]: " scratchprojq
		[[ $scratchprojq == "" ]] && echo "Using CWD: $(pwd)/" && scratchprojq="$(pwd)/"
		[[ ! -d $scratchprojq ]] && echo "The directory $scratchprojq does not exits" && continue
		[[ $scratchprojq == "q" ]] && echo "Exiting.." && exit 0

		echo "Perfect! Group/User directory set. Directory: $scratchprojq"
		PROJECT_GROUP=$scratchprojq
		echo "#####################################"
		break
	done
	while (true); do
		echo ""
		echo "Your JupyterHub provides an API."
		echo "Attention: If you want to make the JupyterHub API available on the compute node via SSH then use the default :-)"
		read -p "Please enter the URL (e.g. https://jh.projectt.de:8081/hub/api) [http://127.0.0.1:8083/hub/api]: " jhapiq
		[[ $jhapiq == "" ]] && echo "Using default value http://127.0.0.1:8083/hub/api" && jhapiq=http://127.0.0.1:8083/hub/api

		
		echo "Ok.. Trust you. $jhapiq as API URL set."
		EXTERNAL_HUB_URL=$jhapiq
		break
	done
	echo ""
	echo "########## PROJECT INFO ##########"
	echo "########## Scratch directory: " $PROJECT_GROUP
	echo "########## JupyterHub API URL: " $EXTERNAL_HUB_URL
	echo "########## PROJECT INFO ##########"
	echo ""
	ssh_config
}

function start () {

	if [[ -f examples/jh_config_slurm ]]; then
		FILE=examples/jh_config_slurm
	else
		if [[ ! -f jh_config ]]; then
			echo "Error: Config file examples/jh_config or ./jh_config does not exists!"
			exit 1
		fi
		FILE=jh_config
	fi
	echo "Press q or Ctrl to exit"
	read -p "Do you really want to initialize your hpc environment? (yes,no): " startq
	if [[ $startq == "yes" ]]; then
		general_project_config
	elif [[ $startq == "no" ]]; then
		echo "Okelidokei. Exiting..."
		exit 0
	else
		echo "Exiting..."
		exit 0
	fi
	
}
start
